trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  PYTHON_VERSION: '3.11'
  SONAR_ORG: '<YOUR_SONARCLOUD_ORG>'         # replace
  SONAR_PROJECT_KEY: '<YOUR_SONAR_PROJECT_KEY>'  # replace
  # SONAR_TOKEN should be added as a secret pipeline variable (or use service connection)
  TEST_PORT: '8080'
  TEST_URL: 'http://localhost:8080'

stages:
- stage: Build_and_Test
  displayName: 'Build, Test & Coverage'
  jobs:
  - job: test
    displayName: 'Install / Test / Coverage'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(PYTHON_VERSION)'
      displayName: 'Use Python $(PYTHON_VERSION)'

    - script: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt || pip install flask pytest pytest-cov
        pip install sonar-scanner
      displayName: 'Setup virtualenv & install deps'

    - script: |
        source .venv/bin/activate
        mkdir -p reports
        pytest --junitxml=reports/junit.xml --cov=. --cov-report=xml:coverage.xml -q
      displayName: 'Run tests and produce coverage.xml'
      continueOnError: false

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/junit.xml'
        testRunTitle: 'PyTest Results'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'coverage.xml'
        artifactName: 'coverage-report'
      displayName: 'Publish coverage.xml as artifact'

- stage: SonarCloud_Analysis
  displayName: 'SonarCloud Analysis & Quality Gate'
  dependsOn: Build_and_Test
  jobs:
  - job: sonar
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(PYTHON_VERSION)'

    # Option A: using SonarCloud service connection task (easiest)
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: '<SONAR_SERVICE_CONNECTION_IF_USED>'   # optional: if you created a SonarCloud service connection in DevOps
        organization: '$(SONAR_ORG)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(SONAR_PROJECT_KEY)'
        cliProjectName: 'DevSecOps-PythonApp'
        extraProperties: |
          sonar.python.coverage.reportPaths=coverage.xml

    # Option B (if you prefer token var instead of service connection) - keep SONAR_TOKEN set as secret variable
    # If you used token, SonarCloudPrepare will still work; ensure SONAR_TOKEN is available.

    - script: |
        source .venv/bin/activate || true
        # nothing heavy here - analysis will use files produced in previous stage
        echo "Starting SonarCloud Analyze..."
      displayName: 'Pre-analysis step (noop)'

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud Quality Gate Result'

- stage: Deploy_and_DAST
  displayName: 'Start App (local) & OWASP ZAP DAST'
  dependsOn: SonarCloud_Analysis
  jobs:
  - job: dast
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(PYTHON_VERSION)'

    - script: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt || pip install flask
      displayName: 'Setup venv for DAST job'

    - script: |
        source .venv/bin/activate
        # start app in background (use nohup so it keeps running)
        nohup python app.py > app.log 2>&1 &
        echo "Waiting for app to start..."
        sleep 4
        # quick health check
        curl --retry 5 --retry-delay 1 -sS $(TEST_URL)/health || (cat app.log && exit 1)
      displayName: 'Start Flask app (background) and health-check'

    - script: |
        echo "Running OWASP ZAP baseline scan..."
        docker run --rm owasp/zap2docker-stable zap-baseline.py -t $(TEST_URL) -r zap-report.html
      displayName: 'Run OWASP ZAP baseline (Docker)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'zap-report.html'
        artifactName: 'ZAP-Report'
      displayName: 'Publish ZAP report'

    - script: |
        echo "DAST job finished. Check artifacts for the ZAP report."
      displayName: 'Done'
